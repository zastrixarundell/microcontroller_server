searchData={"items":[{"type":"module","title":"MicrocontrollerServer","doc":"MicrocontrollerServer keeps the contexts that define your domain\nand business logic.\n\nContexts are also responsible for managing your data, regardless\nif it comes from the database, an external API or others.","ref":"MicrocontrollerServer.html"},{"type":"module","title":"MicrocontrollerServer.Microcontroller","doc":"The Microcontroller context.","ref":"MicrocontrollerServer.Microcontroller.html"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.change_device/2","doc":"Returns an `%Ecto.Changeset{}` for tracking device changes.","ref":"MicrocontrollerServer.Microcontroller.html#change_device/2"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.change_device/2","doc":"iex> change_device(device)\n    %Ecto.Changeset{data: %Device{}}","ref":"MicrocontrollerServer.Microcontroller.html#change_device/2-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.change_reading/2","doc":"Returns an `%Ecto.Changeset{}` for tracking reading changes.","ref":"MicrocontrollerServer.Microcontroller.html#change_reading/2"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.change_reading/2","doc":"iex> change_reading(reading)\n    %Ecto.Changeset{data: %Reading{}}","ref":"MicrocontrollerServer.Microcontroller.html#change_reading/2-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.change_sensor/2","doc":"Returns an `%Ecto.Changeset{}` for tracking sensor changes.","ref":"MicrocontrollerServer.Microcontroller.html#change_sensor/2"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.change_sensor/2","doc":"iex> change_sensor(sensor)\n    %Ecto.Changeset{data: %Sensor{}}","ref":"MicrocontrollerServer.Microcontroller.html#change_sensor/2-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.create_device/1","doc":"Creates a device.","ref":"MicrocontrollerServer.Microcontroller.html#create_device/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.create_device/1","doc":"iex> create_device(%{field: value})\n    {:ok, %Device{}}\n\n    iex> create_device(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"MicrocontrollerServer.Microcontroller.html#create_device/1-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.create_reading/1","doc":"Creates a reading.","ref":"MicrocontrollerServer.Microcontroller.html#create_reading/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.create_reading/1","doc":"iex> create_reading(%{field: value})\n    {:ok, %Reading{}}\n\n    iex> create_reading(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"MicrocontrollerServer.Microcontroller.html#create_reading/1-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.create_readings/1","doc":"Insert multiple readings at the same time. Similar to `create_reading/1`, only that it retuns\nan array when it's completed.","ref":"MicrocontrollerServer.Microcontroller.html#create_readings/1"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.create_sensor/1","doc":"Creates a sensor.","ref":"MicrocontrollerServer.Microcontroller.html#create_sensor/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.create_sensor/1","doc":"iex> create_sensor(%{field: value})\n    {:ok, %Sensor{}}\n\n    iex> create_sensor(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"MicrocontrollerServer.Microcontroller.html#create_sensor/1-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.delete_device/1","doc":"Deletes a device.","ref":"MicrocontrollerServer.Microcontroller.html#delete_device/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.delete_device/1","doc":"iex> delete_device(device)\n    {:ok, %Device{}}\n\n    iex> delete_device(device)\n    {:error, %Ecto.Changeset{}}","ref":"MicrocontrollerServer.Microcontroller.html#delete_device/1-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.delete_reading/1","doc":"Deletes a reading.","ref":"MicrocontrollerServer.Microcontroller.html#delete_reading/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.delete_reading/1","doc":"iex> delete_reading(reading)\n    {:ok, %Reading{}}\n\n    iex> delete_reading(reading)\n    {:error, %Ecto.Changeset{}}","ref":"MicrocontrollerServer.Microcontroller.html#delete_reading/1-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.delete_sensor/1","doc":"Deletes a sensor.","ref":"MicrocontrollerServer.Microcontroller.html#delete_sensor/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.delete_sensor/1","doc":"iex> delete_sensor(sensor)\n    {:ok, %Sensor{}}\n\n    iex> delete_sensor(sensor)\n    {:error, %Ecto.Changeset{}}","ref":"MicrocontrollerServer.Microcontroller.html#delete_sensor/1-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.get_device!/1","doc":"Gets a single device.\n\nRaises `Ecto.NoResultsError` if the Device does not exist.","ref":"MicrocontrollerServer.Microcontroller.html#get_device!/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.get_device!/1","doc":"iex> get_device!(123)\n    %Device{}\n\n    iex> get_device!(456)\n    ** (Ecto.NoResultsError)","ref":"MicrocontrollerServer.Microcontroller.html#get_device!/1-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.get_device_by_fields/3","doc":"Gets an existing device by controller_id.","ref":"MicrocontrollerServer.Microcontroller.html#get_device_by_fields/3"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.get_device_by_fields/3","doc":"iex> get_device_by_fields(1, 2, 3)\n    {:ok, %Device{controller_id: 1, user_id: 2, location_id: 3}}\n\n    iex> get_device_by_fields(bad_value, bad_value, bad_value)\n    nil","ref":"MicrocontrollerServer.Microcontroller.html#get_device_by_fields/3-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.get_reading!/1","doc":"Gets a single reading.\n\nRaises `Ecto.NoResultsError` if the Reading does not exist.","ref":"MicrocontrollerServer.Microcontroller.html#get_reading!/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.get_reading!/1","doc":"iex> get_reading!(123)\n    %Reading{}\n\n    iex> get_reading!(456)\n    ** (Ecto.NoResultsError)","ref":"MicrocontrollerServer.Microcontroller.html#get_reading!/1-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.get_sensor!/1","doc":"Gets a single sensor.\n\nRaises `Ecto.NoResultsError` if the Sensor does not exist.","ref":"MicrocontrollerServer.Microcontroller.html#get_sensor!/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.get_sensor!/1","doc":"iex> get_sensor!(123)\n    %Sensor{}\n\n    iex> get_sensor!(456)\n    ** (Ecto.NoResultsError)","ref":"MicrocontrollerServer.Microcontroller.html#get_sensor!/1-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.list_devices/0","doc":"Returns the list of devices.","ref":"MicrocontrollerServer.Microcontroller.html#list_devices/0"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.list_devices/0","doc":"iex> list_devices()\n    [%Device{}, ...]","ref":"MicrocontrollerServer.Microcontroller.html#list_devices/0-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.list_readings/0","doc":"Returns the list of readings.","ref":"MicrocontrollerServer.Microcontroller.html#list_readings/0"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.list_readings/0","doc":"iex> list_readings()\n    [%Reading{}, ...]","ref":"MicrocontrollerServer.Microcontroller.html#list_readings/0-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.list_sensors/0","doc":"Returns the list of sensors.","ref":"MicrocontrollerServer.Microcontroller.html#list_sensors/0"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.list_sensors/0","doc":"iex> list_sensors()\n    [%Sensor{}, ...]","ref":"MicrocontrollerServer.Microcontroller.html#list_sensors/0-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.list_sensors_for_device/1","doc":"Gets all of the sensor values for the given device.","ref":"MicrocontrollerServer.Microcontroller.html#list_sensors_for_device/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.list_sensors_for_device/1","doc":"iex> list_sensors_for_device(device_id)\n    [%Sensor{}, %Sensor{}]","ref":"MicrocontrollerServer.Microcontroller.html#list_sensors_for_device/1-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.load_sensor_with_device/1","doc":"Load the ecto relation with the device for a sensor.","ref":"MicrocontrollerServer.Microcontroller.html#load_sensor_with_device/1"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.load_sensor_with_readings/1","doc":"Load the ecto relation with readings for a sensor.","ref":"MicrocontrollerServer.Microcontroller.html#load_sensor_with_readings/1"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.update_device/2","doc":"Updates a device.","ref":"MicrocontrollerServer.Microcontroller.html#update_device/2"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.update_device/2","doc":"iex> update_device(device, %{field: new_value})\n    {:ok, %Device{}}\n\n    iex> update_device(device, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"MicrocontrollerServer.Microcontroller.html#update_device/2-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.update_reading/2","doc":"Updates a reading.","ref":"MicrocontrollerServer.Microcontroller.html#update_reading/2"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.update_reading/2","doc":"iex> update_reading(reading, %{field: new_value})\n    {:ok, %Reading{}}\n\n    iex> update_reading(reading, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"MicrocontrollerServer.Microcontroller.html#update_reading/2-examples"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.update_sensor/2","doc":"Updates a sensor.","ref":"MicrocontrollerServer.Microcontroller.html#update_sensor/2"},{"type":"function","title":"Examples - MicrocontrollerServer.Microcontroller.update_sensor/2","doc":"iex> update_sensor(sensor, %{field: new_value})\n    {:ok, %Sensor{}}\n\n    iex> update_sensor(sensor, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"MicrocontrollerServer.Microcontroller.html#update_sensor/2-examples"},{"type":"module","title":"MicrocontrollerServer.Microcontroller.Device","doc":"Module representing the Device model.","ref":"MicrocontrollerServer.Microcontroller.Device.html"},{"type":"type","title":"MicrocontrollerServer.Microcontroller.Device.t/0","doc":"","ref":"MicrocontrollerServer.Microcontroller.Device.html#t:t/0"},{"type":"module","title":"MicrocontrollerServer.Microcontroller.Reading","doc":"Module representing the Reading model.","ref":"MicrocontrollerServer.Microcontroller.Reading.html"},{"type":"type","title":"MicrocontrollerServer.Microcontroller.Reading.t/0","doc":"","ref":"MicrocontrollerServer.Microcontroller.Reading.html#t:t/0"},{"type":"module","title":"MicrocontrollerServer.Microcontroller.ReadingType","doc":"Data type to be used as a `MicrocontrollerServer.Microcontroller.Reading` field.\nThis is used to that it can be written as a string in the model but to be saved\nas an integer in the database.","ref":"MicrocontrollerServer.Microcontroller.ReadingType.html"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.ReadingType.cast/1","doc":"","ref":"MicrocontrollerServer.Microcontroller.ReadingType.html#cast/1"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.ReadingType.dump/1","doc":"","ref":"MicrocontrollerServer.Microcontroller.ReadingType.html#dump/1"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.ReadingType.embed_as/1","doc":"","ref":"MicrocontrollerServer.Microcontroller.ReadingType.html#embed_as/1"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.ReadingType.equal?/2","doc":"","ref":"MicrocontrollerServer.Microcontroller.ReadingType.html#equal?/2"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.ReadingType.load/1","doc":"","ref":"MicrocontrollerServer.Microcontroller.ReadingType.html#load/1"},{"type":"function","title":"MicrocontrollerServer.Microcontroller.ReadingType.type/0","doc":"","ref":"MicrocontrollerServer.Microcontroller.ReadingType.html#type/0"},{"type":"module","title":"MicrocontrollerServer.Microcontroller.Sensor","doc":"Module representing the Sensor model.","ref":"MicrocontrollerServer.Microcontroller.Sensor.html"},{"type":"type","title":"MicrocontrollerServer.Microcontroller.Sensor.t/0","doc":"","ref":"MicrocontrollerServer.Microcontroller.Sensor.html#t:t/0"},{"type":"module","title":"MicrocontrollerServer.Repo","doc":"","ref":"MicrocontrollerServer.Repo.html"},{"type":"function","title":"MicrocontrollerServer.Repo.aggregate/3","doc":"","ref":"MicrocontrollerServer.Repo.html#aggregate/3"},{"type":"function","title":"MicrocontrollerServer.Repo.aggregate/4","doc":"","ref":"MicrocontrollerServer.Repo.html#aggregate/4"},{"type":"function","title":"MicrocontrollerServer.Repo.all/2","doc":"","ref":"MicrocontrollerServer.Repo.html#all/2"},{"type":"function","title":"MicrocontrollerServer.Repo.checked_out?/0","doc":"","ref":"MicrocontrollerServer.Repo.html#checked_out?/0"},{"type":"function","title":"MicrocontrollerServer.Repo.checkout/2","doc":"","ref":"MicrocontrollerServer.Repo.html#checkout/2"},{"type":"function","title":"MicrocontrollerServer.Repo.child_spec/1","doc":"","ref":"MicrocontrollerServer.Repo.html#child_spec/1"},{"type":"function","title":"MicrocontrollerServer.Repo.config/0","doc":"","ref":"MicrocontrollerServer.Repo.html#config/0"},{"type":"function","title":"MicrocontrollerServer.Repo.default_options/1","doc":"","ref":"MicrocontrollerServer.Repo.html#default_options/1"},{"type":"function","title":"MicrocontrollerServer.Repo.delete/2","doc":"","ref":"MicrocontrollerServer.Repo.html#delete/2"},{"type":"function","title":"MicrocontrollerServer.Repo.delete!/2","doc":"","ref":"MicrocontrollerServer.Repo.html#delete!/2"},{"type":"function","title":"MicrocontrollerServer.Repo.delete_all/2","doc":"","ref":"MicrocontrollerServer.Repo.html#delete_all/2"},{"type":"function","title":"MicrocontrollerServer.Repo.disconnect_all/2","doc":"A convenience function for SQL-based repositories that forces all connections in the\npool to disconnect within the given interval.\n\nSee `Ecto.Adapters.SQL.disconnect_all/3` for more information.","ref":"MicrocontrollerServer.Repo.html#disconnect_all/2"},{"type":"function","title":"MicrocontrollerServer.Repo.exists?/2","doc":"","ref":"MicrocontrollerServer.Repo.html#exists?/2"},{"type":"function","title":"MicrocontrollerServer.Repo.explain/3","doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar\ndepending on the adapter to obtain statistics for the given query.\n\nSee `Ecto.Adapters.SQL.explain/4` for more information.","ref":"MicrocontrollerServer.Repo.html#explain/3"},{"type":"function","title":"MicrocontrollerServer.Repo.get/3","doc":"","ref":"MicrocontrollerServer.Repo.html#get/3"},{"type":"function","title":"MicrocontrollerServer.Repo.get!/3","doc":"","ref":"MicrocontrollerServer.Repo.html#get!/3"},{"type":"function","title":"MicrocontrollerServer.Repo.get_by/3","doc":"","ref":"MicrocontrollerServer.Repo.html#get_by/3"},{"type":"function","title":"MicrocontrollerServer.Repo.get_by!/3","doc":"","ref":"MicrocontrollerServer.Repo.html#get_by!/3"},{"type":"function","title":"MicrocontrollerServer.Repo.get_dynamic_repo/0","doc":"","ref":"MicrocontrollerServer.Repo.html#get_dynamic_repo/0"},{"type":"function","title":"MicrocontrollerServer.Repo.in_transaction?/0","doc":"","ref":"MicrocontrollerServer.Repo.html#in_transaction?/0"},{"type":"function","title":"MicrocontrollerServer.Repo.insert/2","doc":"","ref":"MicrocontrollerServer.Repo.html#insert/2"},{"type":"function","title":"MicrocontrollerServer.Repo.insert!/2","doc":"","ref":"MicrocontrollerServer.Repo.html#insert!/2"},{"type":"function","title":"MicrocontrollerServer.Repo.insert_all/3","doc":"","ref":"MicrocontrollerServer.Repo.html#insert_all/3"},{"type":"function","title":"MicrocontrollerServer.Repo.insert_or_update/2","doc":"","ref":"MicrocontrollerServer.Repo.html#insert_or_update/2"},{"type":"function","title":"MicrocontrollerServer.Repo.insert_or_update!/2","doc":"","ref":"MicrocontrollerServer.Repo.html#insert_or_update!/2"},{"type":"function","title":"MicrocontrollerServer.Repo.load/2","doc":"","ref":"MicrocontrollerServer.Repo.html#load/2"},{"type":"function","title":"MicrocontrollerServer.Repo.one/2","doc":"","ref":"MicrocontrollerServer.Repo.html#one/2"},{"type":"function","title":"MicrocontrollerServer.Repo.one!/2","doc":"","ref":"MicrocontrollerServer.Repo.html#one!/2"},{"type":"function","title":"MicrocontrollerServer.Repo.preload/3","doc":"","ref":"MicrocontrollerServer.Repo.html#preload/3"},{"type":"function","title":"MicrocontrollerServer.Repo.prepare_query/3","doc":"","ref":"MicrocontrollerServer.Repo.html#prepare_query/3"},{"type":"function","title":"MicrocontrollerServer.Repo.put_dynamic_repo/1","doc":"","ref":"MicrocontrollerServer.Repo.html#put_dynamic_repo/1"},{"type":"function","title":"MicrocontrollerServer.Repo.query/3","doc":"A convenience function for SQL-based repositories that executes the given query.\n\nSee `Ecto.Adapters.SQL.query/4` for more information.","ref":"MicrocontrollerServer.Repo.html#query/3"},{"type":"function","title":"MicrocontrollerServer.Repo.query!/3","doc":"A convenience function for SQL-based repositories that executes the given query.\n\nSee `Ecto.Adapters.SQL.query!/4` for more information.","ref":"MicrocontrollerServer.Repo.html#query!/3"},{"type":"function","title":"MicrocontrollerServer.Repo.query_many/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query.\n\nSee `Ecto.Adapters.SQL.query_many/4` for more information.","ref":"MicrocontrollerServer.Repo.html#query_many/3"},{"type":"function","title":"MicrocontrollerServer.Repo.query_many!/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query.\n\nSee `Ecto.Adapters.SQL.query_many!/4` for more information.","ref":"MicrocontrollerServer.Repo.html#query_many!/3"},{"type":"function","title":"MicrocontrollerServer.Repo.reload/2","doc":"","ref":"MicrocontrollerServer.Repo.html#reload/2"},{"type":"function","title":"MicrocontrollerServer.Repo.reload!/2","doc":"","ref":"MicrocontrollerServer.Repo.html#reload!/2"},{"type":"function","title":"MicrocontrollerServer.Repo.rollback/1","doc":"","ref":"MicrocontrollerServer.Repo.html#rollback/1"},{"type":"function","title":"MicrocontrollerServer.Repo.start_link/1","doc":"","ref":"MicrocontrollerServer.Repo.html#start_link/1"},{"type":"function","title":"MicrocontrollerServer.Repo.stop/1","doc":"","ref":"MicrocontrollerServer.Repo.html#stop/1"},{"type":"function","title":"MicrocontrollerServer.Repo.stream/2","doc":"","ref":"MicrocontrollerServer.Repo.html#stream/2"},{"type":"function","title":"MicrocontrollerServer.Repo.to_sql/2","doc":"A convenience function for SQL-based repositories that translates the given query to SQL.\n\nSee `Ecto.Adapters.SQL.to_sql/3` for more information.","ref":"MicrocontrollerServer.Repo.html#to_sql/2"},{"type":"function","title":"MicrocontrollerServer.Repo.transaction/2","doc":"","ref":"MicrocontrollerServer.Repo.html#transaction/2"},{"type":"function","title":"MicrocontrollerServer.Repo.update/2","doc":"","ref":"MicrocontrollerServer.Repo.html#update/2"},{"type":"function","title":"MicrocontrollerServer.Repo.update!/2","doc":"","ref":"MicrocontrollerServer.Repo.html#update!/2"},{"type":"function","title":"MicrocontrollerServer.Repo.update_all/3","doc":"","ref":"MicrocontrollerServer.Repo.html#update_all/3"},{"type":"behaviour","title":"MicrocontrollerServer.Services.AuthServices.Clients.MicrocontrollerBehaviour","doc":"Behaviour for the API requests for the microcontroller auth server. It's written this way\nto be able to be mocked.","ref":"MicrocontrollerServer.Services.AuthServices.Clients.MicrocontrollerBehaviour.html"},{"type":"callback","title":"MicrocontrollerServer.Services.AuthServices.Clients.MicrocontrollerBehaviour.get/2","doc":"Wrapper for HTTPoison get. It's written this way to be able to be mocked in tests.","ref":"MicrocontrollerServer.Services.AuthServices.Clients.MicrocontrollerBehaviour.html#c:get/2"},{"type":"module","title":"MicrocontrollerServer.Services.AuthServices.Clients.MicrocontrollerClient","doc":"Actual implementation of the HTTPoison request wrappers.","ref":"MicrocontrollerServer.Services.AuthServices.Clients.MicrocontrollerClient.html"},{"type":"function","title":"MicrocontrollerServer.Services.AuthServices.Clients.MicrocontrollerClient.get/2","doc":"","ref":"MicrocontrollerServer.Services.AuthServices.Clients.MicrocontrollerClient.html#get/2"},{"type":"behaviour","title":"MicrocontrollerServer.Services.AuthServices.MicrocontrollerAuthBehaviour","doc":"Behaviour module for the authorization server for microcontrollers","ref":"MicrocontrollerServer.Services.AuthServices.MicrocontrollerAuthBehaviour.html"},{"type":"callback","title":"MicrocontrollerServer.Services.AuthServices.MicrocontrollerAuthBehaviour.authenticate_token/1","doc":"","ref":"MicrocontrollerServer.Services.AuthServices.MicrocontrollerAuthBehaviour.html#c:authenticate_token/1"},{"type":"module","title":"MicrocontrollerServer.Services.AuthServices.MicrocontrollerAuthService","doc":"Service file for perfoming requests to the microcontroller authentication server.","ref":"MicrocontrollerServer.Services.AuthServices.MicrocontrollerAuthService.html"},{"type":"function","title":"MicrocontrollerServer.Services.AuthServices.MicrocontrollerAuthService.authenticate_token/1","doc":"Authenticate the token against the authentication servers. If the token is okay\nthen the authentication server witll give basic controller infromation\nlike the Controller ID, user ID and location ID (the location ID is used\nto send information to the controlers en-masse).","ref":"MicrocontrollerServer.Services.AuthServices.MicrocontrollerAuthService.html#authenticate_token/1"},{"type":"function","title":"Examples - MicrocontrollerServer.Services.AuthServices.MicrocontrollerAuthService.authenticate_token/1","doc":"iex> authenticate_token(\"CORRECT_TOKEN\")\n    {:ok, %{user_id: 1, location_id: 2, controller_id: 3}}\n\n    iex> authenticate_token(\"INVALID_TOKEN\")\n    {:error, :authentication_failed}\n\n    iex> authenticate_token(\"INACCESSIBLE_SERVER\")\n    {:error, :authentication_failed}","ref":"MicrocontrollerServer.Services.AuthServices.MicrocontrollerAuthService.html#authenticate_token/1-examples"},{"type":"module","title":"MicrocontrollerServerWeb","doc":"The entrypoint for defining your web interface, such\nas controllers, components, channels, and so on.\n\nThis can be used in your application as:\n\n    use MicrocontrollerServerWeb, :controller\n    use MicrocontrollerServerWeb, :html\n\nThe definitions below will be executed for every controller,\ncomponent, etc, so keep them short and clean, focused\non imports, uses and aliases.\n\nDo NOT define functions inside the quoted expressions\nbelow. Instead, define additional modules and import\nthose modules here.","ref":"MicrocontrollerServerWeb.html"},{"type":"macro","title":"MicrocontrollerServerWeb.__using__/1","doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"MicrocontrollerServerWeb.html#__using__/1"},{"type":"function","title":"MicrocontrollerServerWeb.channel/0","doc":"","ref":"MicrocontrollerServerWeb.html#channel/0"},{"type":"function","title":"MicrocontrollerServerWeb.controller/0","doc":"","ref":"MicrocontrollerServerWeb.html#controller/0"},{"type":"function","title":"MicrocontrollerServerWeb.router/0","doc":"","ref":"MicrocontrollerServerWeb.html#router/0"},{"type":"function","title":"MicrocontrollerServerWeb.static_paths/0","doc":"","ref":"MicrocontrollerServerWeb.html#static_paths/0"},{"type":"function","title":"MicrocontrollerServerWeb.verified_routes/0","doc":"","ref":"MicrocontrollerServerWeb.html#verified_routes/0"},{"type":"module","title":"MicrocontrollerServerWeb.Endpoint","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.broadcast/3","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html#broadcast/3"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.broadcast!/3","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html#broadcast!/3"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.broadcast_from/4","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html#broadcast_from/4"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.broadcast_from!/4","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html#broadcast_from!/4"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.call/2","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html#call/2"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.child_spec/1","doc":"Returns the child specification to start the endpoint\nunder a supervision tree.","ref":"MicrocontrollerServerWeb.Endpoint.html#child_spec/1"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.config/2","doc":"Returns the endpoint configuration for `key`\n\nReturns `default` if the key does not exist.","ref":"MicrocontrollerServerWeb.Endpoint.html#config/2"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.config_change/2","doc":"Reloads the configuration given the application environment changes.","ref":"MicrocontrollerServerWeb.Endpoint.html#config_change/2"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.host/0","doc":"Returns the host for the given endpoint.","ref":"MicrocontrollerServerWeb.Endpoint.html#host/0"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.init/1","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html#init/1"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.local_broadcast/3","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html#local_broadcast/3"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.local_broadcast_from/4","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html#local_broadcast_from/4"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.path/1","doc":"Generates the path information when routing to this endpoint.","ref":"MicrocontrollerServerWeb.Endpoint.html#path/1"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.script_name/0","doc":"Generates the script name.","ref":"MicrocontrollerServerWeb.Endpoint.html#script_name/0"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.start_link/1","doc":"Starts the endpoint supervision tree.\n\nAll other options are merged into the endpoint configuration.","ref":"MicrocontrollerServerWeb.Endpoint.html#start_link/1"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.static_integrity/1","doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file\nin `priv/static`. Meant to be used for Subresource Integrity with CDNs.","ref":"MicrocontrollerServerWeb.Endpoint.html#static_integrity/1"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.static_lookup/1","doc":"Returns a two item tuple with the first item being the `static_path`\nand the second item being the `static_integrity`.","ref":"MicrocontrollerServerWeb.Endpoint.html#static_lookup/1"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.static_path/1","doc":"Generates a route to a static file in `priv/static`.","ref":"MicrocontrollerServerWeb.Endpoint.html#static_path/1"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.static_url/0","doc":"Generates the static URL without any path information.\n\nIt uses the configuration under `:static_url` to generate\nsuch. It falls back to `:url` if `:static_url` is not set.","ref":"MicrocontrollerServerWeb.Endpoint.html#static_url/0"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.struct_url/0","doc":"Generates the endpoint base URL but as a `URI` struct.\n\nIt uses the configuration under `:url` to generate such.\nUseful for manipulating the URL data and passing it to\nURL helpers.","ref":"MicrocontrollerServerWeb.Endpoint.html#struct_url/0"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.subscribe/2","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html#subscribe/2"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.unsubscribe/1","doc":"","ref":"MicrocontrollerServerWeb.Endpoint.html#unsubscribe/1"},{"type":"function","title":"MicrocontrollerServerWeb.Endpoint.url/0","doc":"Generates the endpoint base URL without any path information.\n\nIt uses the configuration under `:url` to generate such.","ref":"MicrocontrollerServerWeb.Endpoint.html#url/0"},{"type":"module","title":"MicrocontrollerServerWeb.ErrorJSON","doc":"","ref":"MicrocontrollerServerWeb.ErrorJSON.html"},{"type":"function","title":"MicrocontrollerServerWeb.ErrorJSON.render/2","doc":"","ref":"MicrocontrollerServerWeb.ErrorJSON.html#render/2"},{"type":"module","title":"MicrocontrollerServerWeb.Gettext","doc":"A module providing Internationalization with a gettext-based API.\n\nBy using [Gettext](https://hexdocs.pm/gettext),\nyour module gains a set of macros for translations, for example:\n\n    import MicrocontrollerServerWeb.Gettext\n\n    # Simple translation\n    gettext(\"Here is the string to translate\")\n\n    # Plural translation\n    ngettext(\"Here is the string to translate\",\n             \"Here are the strings to translate\",\n             3)\n\n    # Domain-based translation\n    dgettext(\"errors\", \"Here is the error message to translate\")\n\nSee the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.","ref":"MicrocontrollerServerWeb.Gettext.html"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.dgettext/3","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#dgettext/3"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.dgettext_noop/2","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#dgettext_noop/2"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.dngettext/5","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#dngettext/5"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.dngettext_noop/3","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#dngettext_noop/3"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.dpgettext/4","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#dpgettext/4"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.dpgettext_noop/3","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#dpgettext_noop/3"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.dpngettext/6","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#dpngettext/6"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.dpngettext_noop/4","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#dpngettext_noop/4"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.gettext/2","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#gettext/2"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.gettext_comment/1","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#gettext_comment/1"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.gettext_noop/1","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#gettext_noop/1"},{"type":"function","title":"MicrocontrollerServerWeb.Gettext.handle_missing_bindings/2","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#handle_missing_bindings/2"},{"type":"function","title":"MicrocontrollerServerWeb.Gettext.handle_missing_plural_translation/7","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#handle_missing_plural_translation/7"},{"type":"function","title":"MicrocontrollerServerWeb.Gettext.handle_missing_translation/5","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#handle_missing_translation/5"},{"type":"function","title":"MicrocontrollerServerWeb.Gettext.lgettext/5","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#lgettext/5"},{"type":"function","title":"MicrocontrollerServerWeb.Gettext.lngettext/7","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#lngettext/7"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.ngettext/4","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#ngettext/4"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.ngettext_noop/2","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#ngettext_noop/2"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.pgettext/3","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#pgettext/3"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.pgettext_noop/2","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#pgettext_noop/2"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.pngettext/5","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#pngettext/5"},{"type":"macro","title":"MicrocontrollerServerWeb.Gettext.pngettext_noop/3","doc":"","ref":"MicrocontrollerServerWeb.Gettext.html#pngettext_noop/3"},{"type":"module","title":"MicrocontrollerServerWeb.MicrocontrollerSocket","doc":"Socket for microcontrollers trying to authenticate to the server. This file handles the incoming\nconnections, checks whether the API token which they are sending are valid and in case they are\nit allows the request to be handled by the correct API version of the channel.\n\nWhen the client connects to the socket a message is sent to it containing the required metadata.","ref":"MicrocontrollerServerWeb.MicrocontrollerSocket.html"},{"type":"function","title":"MicrocontrollerServerWeb.MicrocontrollerSocket.api_token_regex/1","doc":"Check the API token against a preset regex rule. The rule is that the API token\nmust start with `API_TOKEN_MC_` and is then followed by at least `16` characters\nwhich can be uppercase and lowercaser letters alongside numbers.","ref":"MicrocontrollerServerWeb.MicrocontrollerSocket.html#api_token_regex/1"},{"type":"function","title":"Examples - MicrocontrollerServerWeb.MicrocontrollerSocket.api_token_regex/1","doc":"iex> api_token_regex(\"API_TOKEN_MC_VZGkp2vvJJjHj3qZ\")\n    {:ok, \"API_TOKEN_MC_VZGkp2vvJJjHj3qZ\"}\n\n    iex> api_token_regex(\"API_TOKEN_MC_VZGkp2vvJ\")\n    {:error, :invalid_token}\n\n    iex> api_token_regex(\"oAPI_TOKEN_MC_VZGkp2vvJ\")\n    {:error, :invalid_token}\n\n    iex> api_token_regex(\"oAPI_TOKEN_MC_VZGkp2vvJ@\")\n    {:error, :invalid_token}\n\n    iex> api_token_regex(\"API_TOKEN_MC_VZGkp2vvJJjHj3q@\")\n    {:error, :invalid_token}\n\n    iex> api_token_regex(nil)\n    {:error, :invalid_token}","ref":"MicrocontrollerServerWeb.MicrocontrollerSocket.html#api_token_regex/1-examples"},{"type":"function","title":"MicrocontrollerServerWeb.MicrocontrollerSocket.authenticate_token/1","doc":"Authenticate the device with the microcontroller authentication server.\n\nThe function returns the following if successful:\n\n* `:ok`\n* `user_id`\n* `location_id`\n* `controller_id`","ref":"MicrocontrollerServerWeb.MicrocontrollerSocket.html#authenticate_token/1"},{"type":"function","title":"Examples - MicrocontrollerServerWeb.MicrocontrollerSocket.authenticate_token/1","doc":"iex> authenticate_token(\"API_TOKEN_MC_VZGkp2vvJJjHj3qZ\")\n    {:ok, 1, 2, 3}\n\n    iex> authenticate_token(\"API_TOKEN_MC_INVALIDTOKENTEST\")\n    {:error, :failed_authentication}","ref":"MicrocontrollerServerWeb.MicrocontrollerSocket.html#authenticate_token/1-examples"},{"type":"function","title":"MicrocontrollerServerWeb.MicrocontrollerSocket.extract_api_key/1","doc":"Retrieve the `x-api-key` header from a list of x_headers. These headers are present in\nthe `connect_info` variable in the connect/3 function call.","ref":"MicrocontrollerServerWeb.MicrocontrollerSocket.html#extract_api_key/1"},{"type":"function","title":"Examples - MicrocontrollerServerWeb.MicrocontrollerSocket.extract_api_key/1","doc":"iex> extract_api_key({\"x-api-key\", \"API_TOKEN_MC_VZGkp2vvJJjHj3qZ\"})\n    \"API_TOKEN_MC_VZGkp2vvJJjHj3qZ\"\n\n    iex> extract_api_key({\"x-api-key1\", \"API_TOKEN_MC_VZGkp2vvJJjHj3qZ\"})\n    nil","ref":"MicrocontrollerServerWeb.MicrocontrollerSocket.html#extract_api_key/1-examples"},{"type":"function","title":"MicrocontrollerServerWeb.MicrocontrollerSocket.generate_metadata_message/1","doc":"Generate the metadata message for sockets. This is a message which gives the socket\nbasic information about itself to be used in future API calls.","ref":"MicrocontrollerServerWeb.MicrocontrollerSocket.html#generate_metadata_message/1"},{"type":"function","title":"Examples - MicrocontrollerServerWeb.MicrocontrollerSocket.generate_metadata_message/1","doc":"iex> generate_metadata_message(%Phoenix.Socket{assigns: %{device: %MicrocontrollerServer.Microcontroller.Device{location_id: 1, user_id: 2, controller_id: 3}}})\n    {:ok, %{ref: nil, payload: %{controller_id: 3, user_id: 2, location_id: 1}, topic: nil, join_ref: nil, event: \"metadata\"}}\n\n    iex> generate_metadata_message(%Phoenix.Socket{})\n    :error","ref":"MicrocontrollerServerWeb.MicrocontrollerSocket.html#generate_metadata_message/1-examples"},{"type":"module","title":"MicrocontrollerServerWeb.Router","doc":"","ref":"MicrocontrollerServerWeb.Router.html"},{"type":"function","title":"MicrocontrollerServerWeb.Router.api/2","doc":"","ref":"MicrocontrollerServerWeb.Router.html#api/2"},{"type":"function","title":"MicrocontrollerServerWeb.Router.call/2","doc":"Callback invoked by Plug on every request.","ref":"MicrocontrollerServerWeb.Router.html#call/2"},{"type":"function","title":"MicrocontrollerServerWeb.Router.init/1","doc":"Callback required by Plug that initializes the router\nfor serving web requests.","ref":"MicrocontrollerServerWeb.Router.html#init/1"},{"type":"extras","title":"MicrocontrollerServer","doc":"# MicrocontrollerServer\n\n> Elixir phoenix based microservice application to control and communicate with microcontrollers.\n\n![CI/CD](https://github.com/zastrixarundell/microcontroller_server/workflows/Elixir%20CI/badge.svg) [![Static Badge](https://img.shields.io/badge/documentation-gray)](https://microcontroller-server.armor.quest)","ref":"readme.html"},{"type":"extras","title":"Contents - MicrocontrollerServer","doc":"* [Detailed explanation](#detailed-explanation)\n* [Setting up](#setting-up)\n  * [Development](#development)\n    * [TODO: Devcontainer integration](#todo-devcontainer-integration)\n    * [asdf installation](#asdf-installation)\n  * [Production](#production)\n  * [Background tools](#background-tools)\n  * [Environment variables](#environment-variables)\n* [Running the server](#running-the-server)\n* [Clients](#clients)\n* [Learn more](#learn-more)","ref":"readme.html#contents"},{"type":"extras","title":"Detailed explanation - MicrocontrollerServer","doc":"This is a microservice which uses websockets to communicate with ESP8266/ESP32 based microcontrollers to read data, controls servos, etc.\n\nThe intent of this application is to have 100% test coverage so TDD is preffered.","ref":"readme.html#detailed-explanation"},{"type":"extras","title":"Setting up - MicrocontrollerServer","doc":"#","ref":"readme.html#setting-up"},{"type":"extras","title":"Development - MicrocontrollerServer","doc":"The preffered way is to use asdf to have full control of the system but devcontainers are also a valid way of running the application in a scenario where an usual development machine can not be accessed.\n\n##","ref":"readme.html#development"},{"type":"extras","title":"TODO: Devcontainer integration - MicrocontrollerServer","doc":"##","ref":"readme.html#todo-devcontainer-integration"},{"type":"extras","title":"asdf installation - MicrocontrollerServer","doc":"The current preffered way to setup the environment is to use [asdf](https://asdf-vm.com). \n\nTo start with the installation please follow the [asdf installation instructions](https://asdf-vm.com/guide/getting-started.html).\n\nAfter that the required plugins need to be added:\n\n```bash\nasdf plugin add elixir\nasdf plugin add erlang\nasdf plugin add vars https://github.com/excid3/asdf-vars\n```\n\nAfter installing the required plugins go to the following file: `~/.asdf/lib/commands/command-exec.bash` and find the line:\n\n```bash\nwith_shim_executable \"$shim_name\" exec_shim || exit $?\n```\n\nAfter that, add a new line before it:\n\n```bash\neval \"$($ASDF_DIR/bin/asdf vars)\"\n```\n\nAnd then the final result should look like:\n\n```bash\neval \"$($ASDF_DIR/bin/asdf vars)\"\nwith_shim_executable \"$shim_name\" exec_shim || exit $?\n```\n\nOnce that step is complete, create a file named `.asdf-vars`, this file will contain all of the environment varulables required by the project.\n\nAfter that step, the final step is to install Elixir and Erlang:\n\n```\nasdf install\n```\n\n#","ref":"readme.html#asdf-installation"},{"type":"extras","title":"Production - MicrocontrollerServer","doc":"Currently the settings for production are the same as for [development](#development).\n\n#","ref":"readme.html#production"},{"type":"extras","title":"Background tools - MicrocontrollerServer","doc":"If the application is ran with asdf, then either `podman` or `docker` need to be installed. In case `podman` and `podman-compose` are installed, you would need to run `podman-compose up -d`.\n\n#","ref":"readme.html#background-tools"},{"type":"extras","title":"Environment variables - MicrocontrollerServer","doc":"|Variable name|Type|Example|Definition|Optional|\n|:-----|:-----|:-----|:-----|:-----|\n|MICROCONTROLLER_AUTH_SERVER|String|http://localhost:5000|URL of the auth server.|No","ref":"readme.html#environment-variables"},{"type":"extras","title":"Running the server - MicrocontrollerServer","doc":"To start your Phoenix server:\n\n  * Run `mix setup` to install and setup dependencies\n  * Start Phoenix endpoint with `mix phx.server` or inside IEx with `iex -S mix phx.server`\n\nNow you can visit [`localhost:4000`](http://localhost:4000) from your browser.\n\nReady to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).","ref":"readme.html#running-the-server"},{"type":"extras","title":"Clients - MicrocontrollerServer","doc":"General documentation for client. Because of the sheer amount of connections/call, specific files are created for each each scenario. Potentially in a CI/CD environment the documentation for the API will be generated and hosted in a better way.\n\n* [Microcontroller as client](./MICROCONTROLLER_SOCKET.md)","ref":"readme.html#clients"},{"type":"extras","title":"Learn more - MicrocontrollerServer","doc":"* Official website: https://www.phoenixframework.org/\n  * Guides: https://hexdocs.pm/phoenix/overview.html\n  * Docs: https://hexdocs.pm/phoenix\n  * Forum: https://elixirforum.com/c/phoenix-forum\n  * Source: https://github.com/phoenixframework/phoenix","ref":"readme.html#learn-more"},{"type":"extras","title":"Microcontroller Socket","doc":"# Microcontroller Socket\n\nThis is a documentation file for the basics of using a microcontroller to connect to the server.","ref":"microcontroller_socket.html"},{"type":"extras","title":"Prerequisites - Microcontroller Socket","doc":"To run this an auth server for microcontrollers needs to be started. In the development environment this can be via running the [python mock server script](bin/mock-server.py).\n\nAfter running `python bin/mock-server.py` a mock server running on `http://127.0.0.1:5000` will be started. This gives basic information mostly made for a singular device currently.\n\nMake sure that the environment variable for the auth server is set to the correct mock address if this is the way it's being used.","ref":"microcontroller_socket.html#prerequisites"},{"type":"extras","title":"Connecting to the server - Microcontroller Socket","doc":"#","ref":"microcontroller_socket.html#connecting-to-the-server"},{"type":"extras","title":"URL for the endpoint - Microcontroller Socket","doc":"The microcontrollers are communicating with the servers via websockets. The path for the microcontroller endpoint is: `/microcontrollers/websocket`.\n\nGiven the following [Caddy](https://caddyserver.com/) (a proxy server) configuration:\n\n```caddy\nmy.subdomain {\n        encode gzip\n        reverse_proxy 127.0.0.1:4000\n}\n```\n\nThe endclient would have to connect via this URL: `wss://my.subdomain/microcontrollers/websocket`. Note, while not using SSL the URI would start with `ws://`.\n\n#","ref":"microcontroller_socket.html#url-for-the-endpoint"},{"type":"extras","title":"Authentication - Microcontroller Socket","doc":"For the microcontroller to actually authenticate with the websocket connection, a custom header needs to be sent. The header in question is: `X-API-Key: api_token`. The API token is present on the authentication server and if it's correctly communicated, the authentication server will send the required information to continue with the connection.\n\nTo see the exact specs of the authentication key take a look at the [documentation page](https://microcontroller-server.armor.quest/MicrocontrollerServerWeb.MicrocontrollerSocket.html#api_token_regex/1).\n\n#","ref":"microcontroller_socket.html#authentication"},{"type":"extras","title":"Metadata - Microcontroller Socket","doc":"When the device authenticates and connects to the server, a message is sent to it on the connect event. The message in question is:\n\n```json\n{\n    \"ref\": null,\n    \"payload\": {\n        \"user_id\": 1,\n        \"location_id\": 2,\n        \"controller_id\": 3\n    },\n    \"topic\": \"microcontroller:3\",\n    \"event\": \"metadata\",\n    \"join_ref\": null\n}\n```","ref":"microcontroller_socket.html#metadata"},{"type":"extras","title":"Communication with Phoenix - Microcontroller Socket","doc":"While official documentation doesn't exist as to how to communicate with Phoenix when not using a JavaScript library there is, thankfully, this [blogpost about it](https://web.archive.org/web/20230530183618/http://graemehill.ca/websocket-clients-and-phoenix-channels/).\n\n#","ref":"microcontroller_socket.html#communication-with-phoenix"},{"type":"extras","title":"Heartbeats - Microcontroller Socket","doc":"In a nutshell the websocket needs to send a message to the Phoenix server every minute. This message should take have this format:\n\n```json\n{\n  \"topic\": \"phoenix\",\n  \"event\": \"heartbeat\",\n  \"payload\": {},\n  \"ref\": 0\n}\n```\n\n\n* `topic`: Usually this is the room the event relates to.\n* `event`: This defines which handler will get invoked on the server side (or potentially client-side if going the other direction). There are some built-in events mostly prefixed with phx_.\n* `payload`: The actual data associated with the event. For some events (like phx_join) the payload is ignored.\n* `ref`: Just an idenfifier for the message. When you get back a reply it will have the same ref value as the event that it is replying to. Since channels are asynchronous you could quickly send two events before receiving a reply and you would need to use ref to know which event it relates to. In my examples I have hard coded ref to 0 but in reality you probably want a counter and some helper function to get the next reference number (or use a uuid).`\n`\n\n#","ref":"microcontroller_socket.html#heartbeats"},{"type":"extras","title":"V1 API - Microcontroller Socket","doc":"##","ref":"microcontroller_socket.html#v1-api"},{"type":"extras","title":"Joining - Microcontroller Socket","doc":"To join the rquired microcontroller channel for the `v1` version of the API, the following data needs to be sent to the server:\n\n```json\n{\n  \"topic\": \"microcontroller:v1:$controller_id\",\n  \"event\": \"phx_join\",\n  \"payload\": {},\n  \"ref\": 0,\n  \"join_ref\": 0\n}\n```\n\n##","ref":"microcontroller_socket.html#joining"},{"type":"extras","title":"Sending reading information - Microcontroller Socket","doc":"After the controller has joined the channel, it can send its' reading information in the following format:\n\n```json\n{\n  \"topic\": \"microcontroller:v1:$controller_id\",\n  \"event\": \"upload_readings\",\n  \"payload\": {\n    \"$sensor-id\": [\n      {\n        \"type\": \"$reading_type\",\n        \"value\": \"$value\"\n      },\n      {\n        \"type\": \"$reading_type\",\n        \"value\": \"$value\"\n      }\n    ]\n  },\n  \"ref\": 0,\n  \"join_ref\": 0\n}\n```\n\n##","ref":"microcontroller_socket.html#sending-reading-information"},{"type":"extras","title":"Motor controls - Microcontroller Socket","doc":"To receive informations as to how to control a motor the following inforamtion needs to be intercepted:\n\n\n```json\n{\n  \"topic\": \"microcontroller:v1:$controller_id\",\n  \"event\": \"control_update\",\n  \"payload\": {\n    \"control\": [\n      {\n        \"$control_id\": $control_value\n      }\n    ]\n  }\n}\n```","ref":"microcontroller_socket.html#motor-controls"}],"content_type":"text/markdown"}